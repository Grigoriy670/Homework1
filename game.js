
function guessNumberGameButton() {
    const maxNumber = 100;
    const randomNumber = Math.floor(Math.random() * maxNumber) + 1; 
    let attempts = 0;
    
    while (true) {
        let guess = prompt(`–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${maxNumber} (–≤–≤–µ–¥–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –≤—ã—Ö–æ–¥–∞)`);
        
        
        if (guess === null || guess.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
            alert('–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
            return;
        }
        
       
        guess = Number(guess);
        if (isNaN(guess) || guess < 1 || guess > maxNumber) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!');
            continue; 
        }
        
        attempts++;
        
        if (guess === randomNumber) {
            alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ${randomNumber} –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫!`);
            return; 
        } else if (guess > randomNumber) {
            alert('‚¨á –ú–µ–Ω—å—à–µ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
        } else {
            alert('‚¨Ü –ë–æ–ª—å—à–µ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
        }
    }
}


function simpleArithmetic() {
    const operations = ['+', '-', '/', '*'];
    let operation = operations[Math.floor(Math.random() * operations.length)];
    let a, b, result;
    let userAnswer;

    a = Math.floor(Math.random() * 10) + 1;
    b = Math.floor(Math.random() * 10) + 1;

    switch (operation) {
        case '+':
            userAnswer = prompt(`–°–ª–æ–∂–∏—Ç–µ ${a} –∏ ${b}`);
            result = a + b;
            break;

        case '-':
            userAnswer = prompt(`–í—ã—á—Ç–∏—Ç–µ ${a} –∏ ${b}`);
            result = a - b;
            break;

        case '*':
            userAnswer = prompt(`–£–º–Ω–æ–∂—å—Ç–µ ${a} –∏ ${b}`);
            result = a * b;
            break;

        case '/':
            userAnswer = prompt(`–†–∞–∑–¥–µ–ª–∏—Ç–µ ${a} –∏ ${b}`);
            result = a / b;
            break;
    }

    
    if (userAnswer === null) {
        alert('–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞');
        return;
    }

   
    userAnswer = +userAnswer;

    if (userAnswer === result) {
        alert('–≠—Ç–æ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç');
    } else {
        alert(`–ù–µ –≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ${result}`);
    }
}

function reverseString() {
    let text = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç');
    alert(text === null ? '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥' : text.split('').reverse().join(''));
}


const quiz = [
    {
        question: "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –Ω–µ–±–æ?",
        options: ["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"],
        correctAnswer: 2,
        explanation: "–°–∏–Ω–∏–π - –ø–æ—Ç–æ–º—É —á—Ç–æ —Ä–∞—Å—Å–µ—è–Ω–∏–µ –†—ç–ª–µ—è –¥–µ–ª–∞–µ—Ç –Ω–µ–±–æ —Å–∏–Ω–∏–º!"
    },
    {
        question: "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ?",
        options: ["–®–µ—Å—Ç—å", "–°–µ–º—å", "–í–æ—Å–µ–º—å"],
        correctAnswer: 2,
        explanation: "7 –¥–Ω–µ–π - —ç—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∏–¥–µ—Ç –∏–∑ –î—Ä–µ–≤–Ω–µ–≥–æ –í–∞–≤–∏–ª–æ–Ω–∞!"
    },
    {
        question: "–°–∫–æ–ª—å–∫–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ?",
        options: ["–ß–µ—Ç—ã—Ä–µ", "–ü—è—Ç—å", "–®–µ—Å—Ç—å"],
        correctAnswer: 2,
        explanation: "5 –ø–∞–ª—å—Ü–µ–≤ - –±–æ–ª—å—à–æ–π, —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –±–µ–∑—ã–º—è–Ω–Ω—ã–π, –º–∏–∑–∏–Ω–µ—Ü!"
    }
];



function startQuiz() {
    let score = 0;

    for(let i = 0; i < quiz.length; i++) {
        const question = quiz[i];

       
        let optionsText = '';
        for(let j = 0; j < question.options.length; j++) {
            optionsText += `${j + 1}. ${question.options[j]}\n`;
        }

        
        const answer = prompt(
            `–í–æ–ø—Ä–æ—Å ${i + 1}/${quiz.length}:\n${question.question}\n\n${optionsText}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:`
        );

        if (answer === null) {
            alert('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞');
            return;
        }

        const userAnswer = parseInt(answer);

        
        if (userAnswer === question.correctAnswer) {
            score++;
            alert('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
        } else {
             alert(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${question.correctAnswer}`)
        }
    }

        alert(`üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${score} –∏–∑ ${quiz.length}`);
    }

const choices = ['–ö–∞–º–µ–Ω—å', '–ù–æ–∂–Ω–∏—Ü—ã', '–ë—É–º–∞–≥–∞'];

function getComputerChoice() {
    const randomIndex = Math.floor(Math.random() * 3);
    return choices[randomIndex].toLowerCase(); 
}

function getUserChoice() {
    const answer = prompt('–í—ã–±–µ—Ä–∏—Ç–µ: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞');
    if (answer === null) {
        return null;
    }
    return answer.toLowerCase();
}

function determineWinner(userChoice, computerChoice) {
    if (userChoice === computerChoice) {
        return 'draw';
    }

    const winConditions = {
        '–∫–∞–º–µ–Ω—å': '–Ω–æ–∂–Ω–∏—Ü—ã',
        '–Ω–æ–∂–Ω–∏—Ü—ã': '–±—É–º–∞–≥–∞', 
        '–±—É–º–∞–≥–∞': '–∫–∞–º–µ–Ω—å'
    };

    if (winConditions[userChoice] === computerChoice) {
        return 'user';
    } else {
        return 'computer';
    }
}

function rockPaperScissors() {
    const userChoice = getUserChoice();
    
    
    if (userChoice === null) {
        alert('–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
        return;
    }
    
    const computerChoice = getComputerChoice();
    const result = determineWinner(userChoice, computerChoice);

    if (result === 'draw') {
        alert(`–ù–∏—á—å—è! –û–±–∞ –≤—ã–±—Ä–∞–ª–∏ ${userChoice}`);
    } else if (result === 'user') {
        alert(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! ${userChoice} –ø–æ–±–µ–∂–¥–∞–µ—Ç ${computerChoice}`);
    } else {
        alert(`–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∏–≥—Ä–∞–ª! ${computerChoice} –ø–æ–±–µ–∂–¥–∞–µ—Ç ${userChoice}`);
    }
}